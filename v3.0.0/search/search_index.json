{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dahlia","text":"<p>Dahlia is a simple text formatting package, inspired by text formatting in the game Minecraft.</p>"},{"location":"#installation","title":"Installation","text":"<p>Dahlia is available on PyPI and can be installed with pip, or any other Python package manager: <pre><code>$ pip install dahlia\n</code></pre> (Some systems may require you to use <code>pip3</code>, <code>python -m pip</code>, or <code>py -m pip</code> instead)</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome!</p> <p>Please open an issue before submitting a pull request (unless it's a minor change like fixing a typo).</p> <p>To get started:</p> <ol> <li>Clone your fork of the project.</li> <li>Set up the project with <code>just install</code> (make sure you have poetry    installed).</li> <li>After you're done, run <code>just check</code> to check your changes.</li> </ol> <p>Note</p> <p>If you don't want to install just, simply look up the recipes in the project's <code>justfile</code>.</p>"},{"location":"#license","title":"License","text":"<p>Dahlia is licensed under the MIT License.</p> <p>If you have any questions, or would like to get in touch, join my Discord server!</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#clean","title":"<code>clean</code>","text":"<p><pre><code>def clean(string: str, marker: str = \"&amp;\") -&gt; str\n</code></pre> Removes all Dahlia codes from a string.</p>"},{"location":"api/#clean_ansi","title":"<code>clean_ansi</code>","text":"<p><pre><code>def clean_ansi(string: str, marker: str = \"&amp;\") -&gt; str\n</code></pre> Removes all ANSI codes from a string.</p>"},{"location":"api/#dahlia","title":"<code>Dahlia</code>","text":"<p><pre><code>DepthInt = Literal[3, 4, 8, 24]\n\nclass Dahlia(\n    *,\n    depth: Depth | DepthInt | str | None = None,\n    marker: str = \"&amp;\",\n    auto_reset: bool = True,\n)\n</code></pre> The core <code>Dahlia</code> class. Accepts the following arguments:</p> <ul> <li><code>depth</code>: the color depth<sup>1</sup> to use for styling; when <code>None</code>, Dahlia will try   to detect the color depth of the current terminal emulator (<code>Depth.LOW</code> will   be used as a fallback). The detected depth can be accessed through the <code>depth</code>   property (will stay <code>None</code> if <code>NO_COLOR=1</code> or <code>TERM=dumb</code>); defaults to <code>None</code></li> <li><code>marker</code>: the character used to mark the beginning of a Dahlia formatting   code; must be a single character; defaults to <code>&amp;</code></li> <li><code>auto_reset</code>: whether to automatically reset the formatting at the end of a   string; defaults to <code>True</code></li> </ul> <p>Dahlia instances are comparable and hashable.</p>"},{"location":"api/#dahliaconvert","title":"<code>Dahlia.convert</code>","text":"<p><pre><code>def convert(self, string: str) -&gt; str\n</code></pre> Transforms<sup>2</sup> a Dahlia string.</p>"},{"location":"api/#dahliainput","title":"<code>Dahlia.input</code>","text":"<p><pre><code>def input(self, prompt: str) -&gt; str\n</code></pre> Wraps the built-in <code>input</code> by transforming<sup>2</sup> the prompt.</p>"},{"location":"api/#dahliaprint","title":"<code>Dahlia.print</code>","text":"<p><pre><code>def print(self, *args: object, **kwargs: Any) -&gt; None\n</code></pre> Wraps the built-in <code>print</code> by transforming<sup>2</sup> all positional arguments and passing through all keyword arguments.</p>"},{"location":"api/#depth","title":"<code>Depth</code>","text":"<p><pre><code>class Depth(Enum):\n    TTY = 3\n    LOW = 4\n    MEDIUM = 8\n    HIGH = 24\n</code></pre> Specifies usable color depth<sup>1</sup> levels.</p> <ol> <li> <p>See \"color depth\" in the specification's glossary.\u00a0\u21a9\u21a9</p> </li> <li> <p>See \"transformation\" in the specification's glossary.\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#the-basics","title":"The basics","text":"<p>All Dahlia formatting is done through instances of the <code>Dahlia</code> class. Different instances transform<sup>1</sup> strings through their <code>convert</code> method\u2014so that each instance can have its own settings.</p> <pre><code>from dahlia import Dahlia\n\ndahlia = Dahlia()\nprint(dahlia.convert(\"&amp;4hello &amp;lthere\"))\n</code></pre> <pre><code>hello there</code></pre> <p>See the Syntax section of the Dahlia specification for a list of all Dahlia codes.</p> <p>The <code>Dahlia</code> class also exposes <code>print</code> and <code>input</code> methods that wrap their built-in counterparts, transforming<sup>1</sup> the provided arguments: <pre><code>from dahlia import Dahlia\n\ndahlia = Dahlia()\ndahlia.print(\"&amp;e&amp;nunderlined&amp;rn yellow\")\n</code></pre></p> <pre><code>underlined yellow</code></pre> <pre><code>from dahlia import Dahlia\n\ndahlia = Dahlia()\nname = dahlia.input(\"&amp;cWhat is your name? \")\nprint(f\"Oh, hi {name}!\")\n</code></pre> <pre><code>What is your name? Mark\nOh, hi Mark!</code></pre> <p>The <code>Dahlia</code> class accepts three optional arguments:</p> <ul> <li>the color depth<sup>2</sup>,</li> <li>the marker, a character that marks the beginning of a Dahlia code,</li> <li>the <code>auto_reset</code> flag, which specifies whether to automatically reset the   formatting at the end of a string.</li> </ul> <p>When not specified, Dahlia will try to detect the color depth<sup>2</sup> of the current terminal emulator. The detected depth can be accessed through the <code>depth</code> property. If it can't be detected, Dahlia will fall back to <code>Depth.LOW</code>. If colors are disabled (either through <code>NO_COLOR=1</code> or <code>TERM=dumb</code>), the depth will stay <code>None</code>. You can run the Dahlia package with <code>python -m dahlia</code> to see your current terminal's capabilities.</p> <p>The default marker is <code>&amp;</code>, and the default value for <code>auto_reset</code> is <code>True</code>. Disabling <code>auto_reset</code> can be useful, for example, when you want to apply the formatting to the user's input: <pre><code>from dahlia import Dahlia\n\ndahlia = Dahlia(marker=\"\u00a7\", auto_reset=False)\nans = dahlia.input(\"\u00a79What's \u00a7l9+10\u00a7rl? \")\nif ans == \"21\":\n    dahlia.print(\"\u00a72Correct!\")\n</code></pre></p> <pre><code>What's 9+10? 21\nCorrect!</code></pre> <pre><code>from dahlia import Dahlia\n\nDahlia().print(\"&amp;ehi\", \"&amp;othere\")\nDahlia(auto_reset=False).print(\"&amp;ehi\", \"&amp;othere\")\n</code></pre> <pre><code>hi there\nhi there</code></pre>"},{"location":"usage/#cleaning-utilities","title":"Cleaning utilities","text":"<p>Dahlia provides two utility functions, <code>clean</code> and <code>clean_ansi</code>, for removing Dahlia and ANSI codes from strings, respectively. <pre><code>from dahlia import Dahlia, clean, clean_ansi\n\ndahlia = Dahlia()\na = \"&amp;aa &amp;b&amp;lbunch &amp;c&amp;nof &amp;d&amp;ostyles &amp;e&amp;mhere\"\nb = dahlia.convert(a)\n\nprint(a)\nprint(clean(a))\nprint()\nprint(repr(b))\nprint(b)\nprint(clean_ansi(b))\n</code></pre></p> <pre><code>&amp;aa &amp;b&amp;lbunch &amp;c&amp;nof &amp;d&amp;ostyles &amp;e&amp;mhere\na bunch of styles here\n\n'\\x1b[38;2;85;255;85ma \\x1b[38;2;85;255;255m\\x1b[1mbunch \\x1b[38;2;255;85;85m\\x1b[4mof \\x1b[38;2;255;85;255m\\x1b[3mstyles \\x1b[38;2;255;255;85m\\x1b[9mhere\\x1b[0m'\na bunch of styles here\na bunch of styles here\n</code></pre> <ol> <li> <p>See \"transformation\" in the specification's glossary.\u00a0\u21a9\u21a9</p> </li> <li> <p>See \"color depth\" in the specification's glossary.\u00a0\u21a9\u21a9</p> </li> </ol>"}]}